/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.17.3
 * source: src/internal/chat-room/infra/grpc/proto/user.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace ms.auth {
    export class UserAuthorizedRequest extends pb_1.Message {
        constructor(data?: any[] | {
            client_id?: string;
            client_secret?: string;
            access_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("client_id" in data && data.client_id != undefined) {
                    this.client_id = data.client_id;
                }
                if ("client_secret" in data && data.client_secret != undefined) {
                    this.client_secret = data.client_secret;
                }
                if ("access_token" in data && data.access_token != undefined) {
                    this.access_token = data.access_token;
                }
            }
        }
        get client_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set client_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get client_secret() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set client_secret(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get access_token() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set access_token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        toObject() {
            const data: {
                client_id?: string;
                client_secret?: string;
                access_token?: string;
            } = {};
            if (this.client_id != null) {
                data.client_id = this.client_id;
            }
            if (this.client_secret != null) {
                data.client_secret = this.client_secret;
            }
            if (this.access_token != null) {
                data.access_token = this.access_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.client_id === "string" && this.client_id.length)
                writer.writeString(1, this.client_id);
            if (typeof this.client_secret === "string" && this.client_secret.length)
                writer.writeString(2, this.client_secret);
            if (typeof this.access_token === "string" && this.access_token.length)
                writer.writeString(3, this.access_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserAuthorizedRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserAuthorizedRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.client_id = reader.readString();
                        break;
                    case 2:
                        message.client_secret = reader.readString();
                        break;
                    case 3:
                        message.access_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserAuthorizedRequest {
            return UserAuthorizedRequest.deserialize(bytes);
        }
    }
    export class UserAuthorizedResponse extends pb_1.Message {
        constructor(data?: any[] | {
            id?: number;
            username?: string;
            first_name?: string;
            last_name?: string;
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("first_name" in data && data.first_name != undefined) {
                    this.first_name = data.first_name;
                }
                if ("last_name" in data && data.last_name != undefined) {
                    this.last_name = data.last_name;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get username() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get first_name() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set first_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get last_name() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set last_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get email() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        toObject() {
            const data: {
                id?: number;
                username?: string;
                first_name?: string;
                last_name?: string;
                email?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.first_name != null) {
                data.first_name = this.first_name;
            }
            if (this.last_name != null) {
                data.last_name = this.last_name;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id !== undefined)
                writer.writeUint64(1, this.id);
            if (typeof this.username === "string" && this.username.length)
                writer.writeString(2, this.username);
            if (typeof this.first_name === "string" && this.first_name.length)
                writer.writeString(3, this.first_name);
            if (typeof this.last_name === "string" && this.last_name.length)
                writer.writeString(4, this.last_name);
            if (typeof this.email === "string" && this.email.length)
                writer.writeString(5, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserAuthorizedResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserAuthorizedResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64();
                        break;
                    case 2:
                        message.username = reader.readString();
                        break;
                    case 3:
                        message.first_name = reader.readString();
                        break;
                    case 4:
                        message.last_name = reader.readString();
                        break;
                    case 5:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserAuthorizedResponse {
            return UserAuthorizedResponse.deserialize(bytes);
        }
    }
    export abstract class UnimplementedAuthUserServiceService {
        static definition = {
            UserAuthorized: {
                path: "/ms.auth.AuthUserService/UserAuthorized",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UserAuthorizedRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UserAuthorizedRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UserAuthorizedResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UserAuthorizedResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract UserAuthorized(call: grpc_1.ServerUnaryCall<UserAuthorizedRequest, UserAuthorizedResponse>, callback: grpc_1.requestCallback<UserAuthorizedResponse>): void;
    }
    export class AuthUserServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedAuthUserServiceService.definition, "AuthUserService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options)
        }
        UserAuthorized(message: UserAuthorizedRequest, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<UserAuthorizedResponse>): grpc_1.ClientUnaryCall;
        UserAuthorized(message: UserAuthorizedRequest, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<UserAuthorizedResponse>): grpc_1.ClientUnaryCall;
        UserAuthorized(message: UserAuthorizedRequest, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<UserAuthorizedResponse>): grpc_1.ClientUnaryCall;
        UserAuthorized(message: UserAuthorizedRequest, callback: grpc_1.requestCallback<UserAuthorizedResponse>): grpc_1.ClientUnaryCall;
        UserAuthorized(message: UserAuthorizedRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UserAuthorizedResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UserAuthorizedResponse>, callback?: grpc_1.requestCallback<UserAuthorizedResponse>): grpc_1.ClientUnaryCall {
            return super.UserAuthorized(message, metadata, options, callback);
        }
    }
}
